---
import Layout from '../../layouts/Layout.astro';

interface Project {
  title: string;
  description: string;
  links?: { label: string; url: string }[]; 
}

export function getStaticPaths() {
  return [
    { params: { slug: 'portafolio' } },
    { params: { slug: 'simpletron' } },
    { params: { slug: 'crud' } },
  ];
}

const { slug } = Astro.params;

const projectData: Record<string, Project> = {
  portafolio: {
    title: "PORTAFOLIO",
    description: "Un portafolio creado con Astro.js, optimizado para velocidad y eficiencia, donde destaco mis habilidades en desarrollo web, APIs, bases de datos y proyectos en C#. Incluye una navegación intuitiva, secciones de proyectos, experiencia y contacto, todo diseñado para una experiencia rápida y responsiva. Las tecnologías utilizadas fueron: Astro.js, Tailwind CSS y HTML.",
    links: [
      { label: "GitHub Repo", url: "https://github.com/CarlosTorres6969/Lenguajes-de-Programaci-n" },
    ],
  },
  simpletron: {
    title: "SIMPLETRON",
    description: "Simpleton es una máquina virtual educatica diseñada para simular el funcionamiento de una computadora báscia. Se utiliza comúnmunte en cursos de programación y ciencia de la computación para enseñar los principios fundamenttales de arquitectura de computadoras. Las tecnologías utilizadas son: C++",
    links: [
      { label: "GitHub Repo", url: "https://github.com/CarlosTorres6969/Simpletron" },
    ],
  },
  crud: {
    title: "CRUD",
    description: "Una CRUD-API creada con Springboot en java permite realizar operaciones de crear,leer,actualizar y eliminar datos en una base de datos mediante endpoints RESTful. Postman se utiliza para probar estos endpoints (como GET, POST, PUT, DELETE), verificando que cada operación funcione correctamente, facilitando el desarrolo y la depuración. Las tecnologías usadas fueron: Java-SpringBoot, Postman,etc",
    links: [
      { label: "GitHub Repo", url: "https://github.com/CarlosTorres6969/CRUD-API" },

    ],
  },
};
---

<Layout title={projectData[slug].title} description={projectData[slug].description}>
  <div class="container mx-auto px-4">
    <h1 class="text-3xl font-bold">{projectData[slug].title}</h1>
    <p class="text-lg mt-2">{projectData[slug].description}</p>
    
    
    {projectData[slug].links && (
      <div class="mt-4 space-y-2">
        {projectData[slug].links.map((link) => (
          <a href={link.url} target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">
            {link.label}
          </a>
        ))}
      </div>
    )}
  </div>
</Layout>
